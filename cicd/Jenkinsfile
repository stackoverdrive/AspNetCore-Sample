def label = "worker-${UUID.randomUUID().toString()}"

podTemplate(label: label, containers: [
  containerTemplate(name: 'awscli', image: 'garland/aws-cli-docker', command: 'cat', ttyEnabled: true),
  containerTemplate(name: 'docker', image: 'docker', command: 'cat', ttyEnabled: true),
  containerTemplate(name: 'kubectl', image: 'lachlanevenson/k8s-kubectl:v1.12.2', command: 'cat', ttyEnabled: true),
  containerTemplate(name: 'helm', image: 'lachlanevenson/k8s-helm:latest', command: 'cat', ttyEnabled: true)
],
volumes: [
  hostPathVolume(mountPath: '/home/gradle/.gradle', hostPath: '/tmp/jenkins/.gradle'),
  hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock')
]) {

  properties([parameters([string(defaultValue: '', description: 'My registry', name: 'registry_url')])])

  node(label) {
      def built_img = ''
      stage('Checkout git repo') {
        checkout scm
      }
      stage('Docker Login') {
        container('awscli') {
          sh(script: "eval \$(aws ecr get-login --region us-east-2 --no-include-email)", returnStdout: true)
        }
      }
      stage('Build and push Docker image') {
        container('docker') {
          sh(script: "docker build -t ${registry_url}/customersapi:${BUILD_NUMBER} -f src/CustomersAPI/Dockerfile .", returnStdout: true)
          sh(script: "docker push ${registry_url}/customersapi:${BUILD_NUMBER}", returnStdout: true)
          sh(script: "docker build -t ${registry_url}/customersmvc:${BUILD_NUMBER} -f src/CustomersMVC/Dockerfile .", returnStdout: true)
          sh(script: "docker push ${registry_url}/customersmvc:${BUILD_NUMBER}", returnStdout: true)
        }
      }
      stage('Unit Tests') {
        sh 'echo test'
      }
      stage('Browser Tests'){
          parallel(
              "Edge":{sh 'echo test'},
              "Firefox":{sh 'echo test'},
              "Chrome":{sh 'echo test'}
              )
      }
      // stage('Deploy into k8s') {

      //   container('helm') {
      //     sh "helm upgrade customers"
      //   }
      //   // sh(script: "cat cicd/k8s.yaml | sed -e 's/build_number/${BUILD_NUMBER}/g' -e 's/YourACRName/${acr_username}/g' | kubectl apply -f - --kubeconfig /var/lib/jenkins/.kube/config", returnStdout: true)
      // }
  }
}